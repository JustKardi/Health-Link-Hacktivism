<!-- maps.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hospital Map</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">

    <style>
        /* CARD STYLING */
        .card-list {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1rem;
            width: 100%;
            margin-bottom: 20px;
        }
        
        .card { 
            padding: 1.5rem 2rem; 
            border-radius: 2rem; 
            text-align: center; 
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); 
            display: flex; 
            flex-direction: column; 
            justify-content: space-between; 
            align-items: center; 
            overflow: hidden; 
            transition: transform 0.3s ease; 
            background: #017BFE; 
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card a {
            text-decoration: none;
            color: inherit; /* Text color */
            width: 100%; 
            height: 100%; 
            display: flex; 
            flex-direction: column; 
            align-items: center;
        }

        .card .title p {
            color: #eaeaea; /* Text color inside the card */
        }

        #cardTitle {
            color: #017BFE; /* Title color */
            text-align: center; /* Center-align the text */
            margin-top: 100px; /* Margin for spacing */
        }

        /* BODY STYLING */
        body {
            background-color: #eaeaea;
            color: #2C2C2C;
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
            padding-top: 80px; /* Space for the fixed header */
        }

        /* HEADER STYLING */
        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 20px;
            background-color: #017BFE;
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            width: 90%; /* Adjust the width to match the container */
            max-width: 1200px; /* Optional: Set a max-width for better control */
            border-radius: 12px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
            z-index: 1000;
        }
        
        .container {
            width: 90%; /* Match the header width */
            max-width: 1200px; /* Optional: Set the same max-width as header */
            margin: 0 auto; /* Center-align the container */
            padding: 20px 0; /* Adjust top and bottom padding as needed */
        }

        h1 {
            color: #cccccc;
        }

        nav ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
            display: flex;
        }

        nav li {
            margin-right: 20px;
        }

        nav li:last-child {
            margin-right: 0;
        }

        nav a {
            position: relative;
            text-decoration: none;
            color: #eaeaea;
            display: inline-block;
            padding: 5px 0;
        }

        nav a::after {
            content: '';
            position: absolute;
            width: 0;
            height: 2px;
            display: block;
            margin-top: 5px;
            right: 0;
            background: #eaeaea;
            transition: width 0.4s ease;
        }

        nav a:hover::after {
            width: 100%;
            left: 0;
            background: #eaeaea;
        }

        nav a:hover {
            color: #eaeaea;
        }

        #map {
            height: 80vh; /* Adjust height as necessary */
            width: 100%;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        footer {
            text-align: center;
            margin-top: 20px;
            font-size: 0.9rem;
            color: #777;
        }

        a {
            color: #007BFF; /* Link color */
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline; /* Underline on hover */
        }
    </style>
</head>

<body>
    <!-- HEADER -->
    <div class="header">
        <h1>Health Link <i class="fa-solid fa-link"></i> </h1>
        <nav>
            <ul>
                <li><a href="/landing">Home</a></li>
                <li><a href="/contact">Contact</a></li>
                <li><a href="/forum">Forum</a></li>
                <li><a href="/login">Log Out</a></li>
            </ul>
        </nav>
    </div>

    <div class="container">
        <h1 id="cardTitle">Hospital Locations</h1>
        <div id="map"></div>
    </div>

    <!-- CARDS CONTAINER -->
    <div class="container">
        <h1 id="cardTitle">Health Services</h1>
        <div class="card-list" id="card-list">
            <!-- Cards will be appended here -->
        </div>
    </div>

    <script>
        const sampleData = [
            {
                pageTitle: "Disease Cases and Symptoms Overview",
                iconClass: "fa-solid fa-virus",
                color: "#eaeaea", // Example color
                link: "/viruses"
            },
            {
                pageTitle: "Health Misinformation Awareness",
                iconClass: "fa-solid fa-book-medical",
                color: "#eaeaea",
                link: "/info"
            },
            {
                pageTitle: "AI Virus Diagnostic Assistant",
                iconClass: "fa-solid fa-robot",
                color: "#eaeaea", // Example color
                link: "/ai"
            },
            {
                pageTitle: "Hospital Locations",
                iconClass: "fa-solid fa-hospital",
                color: "#eaeaea", // Example color
                link: "/maps"
            }
        ];

        document.addEventListener("DOMContentLoaded", function() {
            const cardList = document.getElementById("card-list");

            if (!cardList) {
                console.error("Element not found");
                return;
            }

            sampleData.forEach(data => {
                const card = createCardElement(data);
                cardList.appendChild(card);
            });
        });

        function createCardElement(data) {
            const card = document.createElement("div");
            card.className = "card";
            card.innerHTML = `
                <a href="${data.link}">
                    <i class="${data.iconClass}" style="font-size: 40px; margin-bottom: 20px; color: ${data.color};"></i>
                    <div class="title">
                        <p>${data.pageTitle}</p>
                    </div>
                </a>
            `;
            return card;
        }

    // GOOGLE MAP FUNCTION
    function initMap() {
        const defaultLocation = { lat: 37.7749, lng: -122.4194 }; 

        const map = new google.maps.Map(document.getElementById('map'), {
            zoom: 14,
            center: defaultLocation,
            mapId: 'mapId'
        });

        new google.maps.Marker({
            position: defaultLocation,
            map: map,
            title: 'Default Location',
            icon: {
                url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png" // Optional blue marker icon
            }
        });

        const hospitals = [
            { name: "Hospital A", location: { lat: defaultLocation.lat + 0.015, lng: defaultLocation.lng - 0.010 }, icon: "http://maps.google.com/mapfiles/ms/icons/hospital.png" },
            { name: "Hospital B", location: { lat: defaultLocation.lat - 0.020, lng: defaultLocation.lng + 0.025 }, icon: "http://maps.google.com/mapfiles/ms/icons/clinic.png" },
            { name: "Hospital C", location: { lat: defaultLocation.lat + 0.030, lng: defaultLocation.lng - 0.020 }, icon: "http://maps.google.com/mapfiles/ms/icons/hospital.png" },
            { name: "Hospital D", location: { lat: defaultLocation.lat - 0.025, lng: defaultLocation.lng + 0.030 }, icon: "http://maps.google.com/mapfiles/ms/icons/clinic.png" },
            { name: "Hospital E", location: { lat: defaultLocation.lat + 0.040, lng: defaultLocation.lng - 0.015 }, icon: "http://maps.google.com/mapfiles/ms/icons/hospital.png" },
            { name: "Hospital F", location: { lat: defaultLocation.lat - 0.035, lng: defaultLocation.lng + 0.045 }, icon: "http://maps.google.com/mapfiles/ms/icons/clinic.png" },
            { name: "Hospital G", location: { lat: defaultLocation.lat + 0.025, lng: defaultLocation.lng - 0.035 }, icon: "http://maps.google.com/mapfiles/ms/icons/hospital.png" }
        ];

        hospitals.forEach(hospital => {
            new google.maps.Marker({
                position: hospital.location,
                map: map,
                title: hospital.name,
                icon: {
                    url: "http://maps.google.com/mapfiles/ms/icons/hospitals.png" // Optional red marker icon
                }
            });
        });

        const directionsService = new google.maps.DirectionsService();
        const directionsRenderer = new google.maps.DirectionsRenderer();
        directionsRenderer.setMap(map);

        directionsService.route({
            origin: defaultLocation,
            destination: hospitals[0].location, 
            travelMode: google.maps.TravelMode.DRIVING,
        }, (response, status) => {
            if (status === 'OK') {
                directionsRenderer.setDirections(response);
            } else {
                console.error('Directions request failed due to ' + status);
            }
        });
    }

    function loadMapScript(apiKey, mapId) {
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&map_id=${mapId}&callback=initMap`;
        script.async = true;
        script.defer = true;
        document.head.appendChild(script);
    }

    // Fetch API key from the backend and initialize the map
    document.addEventListener("DOMContentLoaded", function() {
        Promise.all([
            fetch('/api/key').then(response => response.json()).then(data => data.apiKey),
            fetch('/api/mapid').then(response => response.json()).then(data => data.mapId)
        ]).then(([apiKey, mapId]) => {
            loadMapScript(apiKey, mapId);
        }).catch(error => {
            console.error('Error fetching API key or Map ID:', error);
        });
    });

    </script>
</body>
</html>